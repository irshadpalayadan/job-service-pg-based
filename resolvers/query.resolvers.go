package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/irshadpalayadan/job-service-pg-based/graph/generated"
	"github.com/irshadpalayadan/job-service-pg-based/graph/model"
	"github.com/irshadpalayadan/job-service-pg-based/utils"
)

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(_ctx context.Context) ([]*model.JobListing, error) {
	panic(fmt.Errorf("not implemented: Jobs - jobs"))
}

// Job is the resolver for the job field.
func (res *queryResolver) Job(_ctx context.Context, id string) (*model.JobListing, error) {
	res.Logger.Info("started getting Job details in resolver")
	result, err := res.WriteDB.GetJobById(_ctx, id)
	if err != nil {
		res.Logger.Info("Empty Job details found while getting in resolver")
		graphql.AddError(_ctx, utils.ConstructErrorResponse(utils.CAN_NOT_FETCH_BY_ID, "The requested job record doesn't present", res.Logger))
		return nil, nil
	}

	JobListing := &model.JobListing{
		ID:          result.Id,
		Title:       result.Title,
		Description: result.Description,
		Company:     result.Company,
		URL:         result.Url,
	}

	res.Logger.Info("completed getting Job details in resolver")
	return JobListing, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
